(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (if  (f64.convert_u/i32   (f64.add  (i32.convert_s/f64   (i32.shr_u  (get_local $0)  (f64.convert_u/i32   (f64.nearest  (get_local $1)  (if  (if  (i64.convert_s/f64   (i64.gt_s  (f32.convert_s/i64   (f32.abs  (get_local $0)  (i64.convert_s/f32   (i64.rotr  (if  (if  (get_local $0)   (get_local $1)   (get_local $0))   (i32.rotr  (get_local $0)  (if  (get_local $1)   (get_local $1)   (get_local $0)))   (f64.convert_s/i64   (f64.le  (i64.convert_u/f64   (i64.div_u  (get_local $1)  (i32.ctz  (i32.rotr  (get_local $0)  (local "g1086660" i64))  (get_local $1))))  (get_local $0))))  (local "g1086661" i64)))))  (get_local $1)))   (f32.ceil  (i32.convert_u/f32   (i32.gt_s  (f32.convert_u/i32   (f32.neg  (local "g1086662" i64)  (f64.le  (i32.convert_u/f64   (i32.rem_s  (i32.le_s  (get_local $1)  (get_local $1))  (get_local $0)))  (get_local $1))))  (get_local $0)))  (if  (local "g1086664" i32)   (i64.convert_u/f32   (i64.add  (local "g1086665" i64)  (get_local $0)))   (get_local $1)))   (f32.neg  (local "g1086667" i32)  (i32.convert_s/f32   (i32.rotr  (if  (get_local $0)   (get_local $0)   (get_local $0))  (f32.convert_u/i32   (f32.max  (local "g1086804" f32)  (get_local $1)))))))   (get_local $1)   (i64.convert_s/f64   (i64.and  (get_local $0)  (get_local $0))))))))  (i32.convert_u/f64   (i32.lt_s  (f32.convert_s/i32   (f32.div  (local "g1086808" i64)  (i32.convert_u/f32   (i32.rem_s  (local "g1086809" i32)  (f64.convert_u/i32   (f64.nearest  (get_local $0)  (if  (f32.lt  (get_local $0)  (local "g1086810" i64))   (f32.gt  (if  (get_local $1)   (local "g1086811" f32)   (f32.neg  (f64.ge  (f64.ne  (if  (get_local $1)   (get_local $1)   (get_local $1))  (local "g1086812" f32))  (i32.convert_s/f64   (i32.rem_s  (get_local $1)  (f32.convert_u/i32   (f32.add  (if  (local "g1086813" f64)   (f64.floor  (local "g1086814" i64)  (get_local $0))   (local "g1086815" i64))  (get_local $1))))))  (i64.convert_s/f32   (i64.ne  (get_local $1)  (f32.convert_s/i64   (f32.neg  (local "g1086817" f64)  (get_local $0)))))))  (f32.sub  (i32.convert_u/f32   (i32.shl  (if  (f32.convert_s/i32   (f32.div  (get_local $1)  (f64.add  (if  (i64.convert_u/f64   (i64.rem_s  (f32.convert_u/i64   (f32.floor  (get_local $1)  (i64.convert_s/f32   (i64.ctz  (get_local $1)  (get_local $1)))))  (f64.convert_u/i64   (f64.floor  (get_local $0)  (get_local $0)))))   (get_local $1)   (get_local $1))  (get_local $0))))   (f64.convert_s/i32   (f64.mul  (if  (get_local $0)   (get_local $0)   (get_local $0))  (i64.convert_s/f64   (i64.lt_s  (f64.convert_u/i64   (f64.ne  (get_local $0)  (get_local $0)))  (if  (get_local $0)   (get_local $1)   (get_local $1))))))   (get_local $0))  (f32.convert_s/i32   (f32.mul  (get_local $1)  (local "g1088196" i32)))))  (i64.convert_s/f32   (i64.and  (if  (local "g1088197" i64)   (get_local $1)   (i64.rem_u  (local "g1088198" f64)  (if  (local "g1088199" i64)   (get_local $1)   (get_local $1))))  (get_local $1)))))   (f64.floor  (get_local $0)  (local "g1088200" i64)))))))))  (get_local $1)))))   (get_local $0)   (f32.convert_u/i32   (f32.eq  (i64.convert_u/f32   (i64.gt_u  (local "g1088202" i32)  (i64.gt_u  (f64.convert_s/i64   (f64.lt  (get_local $0)  (local "g1088208" f64)))  (get_local $0))))  (get_local $0))))) )