(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (f64.convert_u/i32   (f64.max  (get_local $0)  (f32.mul  (i64.convert_u/f32   (i64.clz  (if  (f32.convert_u/i64   (f32.ne  (i32.convert_s/f32   (i32.mul  (get_local $0)  (i64.popcnt  (i32.div_s  (get_local $1)  (local "g765585" f64))  (local "g765587" f32))))  (if  (get_local $0)   (if  (i64.convert_u/f32   (i64.rotl  (f32.convert_s/i64   (f32.sqrt  (get_local $0)  (get_local $1)))  (get_local $0)))   (f64.gt  (get_local $0)  (f64.copysign  (get_local $1)  (get_local $0)))   (get_local $0))   (i32.convert_s/f32   (i32.div_u  (local "g765589" f64)  (get_local $1))))))   (f32.convert_s/i64   (f32.ceil  (if  (get_local $1)   (get_local $1)   (local "g765590" f64))  (i64.convert_u/f32   (i64.xor  (if  (if  (get_local $1)   (f32.convert_s/i64   (f32.ge  (i32.convert_u/f32   (i32.and  (f32.convert_s/i32   (f32.ne  (get_local $1)  (get_local $0)))  (get_local $1)))  (i32.convert_u/f32   (i32.div_u  (local "g765618" f64)  (get_local $1)))))   (get_local $0))   (i64.eq  (get_local $1)  (get_local $0))   (get_local $0))  (f64.convert_s/i64   (f64.le  (get_local $0)  (if  (i32.convert_s/f64   (i32.clz  (local "g765619" i32)  (get_local $0)))   (i32.convert_u/f64   (i32.rotl  (f64.convert_u/i32   (f64.copysign  (i64.convert_u/f64   (i64.clz  (local "g765620" f32)  (f64.convert_s/i64   (f64.lt  (local "g765621" f32)  (if  (f32.ne  (get_local $1)  (i64.convert_u/f32   (i64.or  (get_local $1)  (local "g765622" i64))))   (local "g765623" i64)   (f64.copysign  (get_local $0)  (get_local $1)))))))  (get_local $1)))  (get_local $0)))   (f32.le  (get_local $0)  (i64.convert_s/f32   (i64.eq  (i32.gt_s  (if  (get_local $1)   (local "g765624" i64)   (get_local $0))  (local "g765625" i32))  (get_local $1)))))))))))   (local "g765626" f32))  (f64.convert_s/i64   (f64.le  (f64.nearest  (get_local $0)  (local "g765627" f32))  (f64.lt  (local "g765630" f64)  (local "g765631" f64))))))  (get_local $0)))) (local $3 i32) (set_local $3  (get_local $1)) (if  (result i32)  (i32.lt_s  (get_local $0)  (get_local $1))  (then  (i32.add  (get_local $0)  (get_local $1)))  (else  (i32.add  (get_local $2)  (get_local $3))))) )