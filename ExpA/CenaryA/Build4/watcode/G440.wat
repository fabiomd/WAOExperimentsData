(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (local $2 i32) (local $3 i32) (i64.shr_u  (get_local $1)  (i32.ctz  (f64.convert_u/i32   (f64.sub  (local "g473" i64)  (i64.convert_u/f64   (i64.and  (f32.convert_u/i64   (f32.min  (get_local $0)  (if  (f64.neg  (f64.nearest  (get_local $1)  (get_local $0))  (local "g493" i32))   (get_local $1)   (f64.le  (local "g494" f32)  (i32.convert_u/f64   (i32.xor  (f32.convert_s/i32   (f32.lt  (f64.ne  (if  (i64.convert_u/f64   (i64.rotr  (get_local $1)  (local "g497" i64)))   (f64.lt  (i64.convert_s/f64   (i64.xor  (get_local $0)  (i32.rotr  (local "g499" i32)  (i64.lt_s  (local "g500" i32)  (f64.convert_s/i64   (f64.ge  (i64.convert_s/f64   (i64.gt_u  (get_local $1)  (f64.convert_s/i64   (f64.trunc  (i32.convert_s/f64   (i32.clz  (f64.convert_s/i32   (f64.gt  (local "g501" i64)  (i64.convert_u/f64   (i64.rotr  (i64.le_u  (get_local $1)  (f32.convert_u/i64   (f32.div  (i32.convert_u/f32   (i32.shr_s  (get_local $1)  (get_local $1)))  (get_local $1))))  (get_local $1)))))  (if  (get_local $0)   (local "g568" f64)   (local "g574" i64))))  (get_local $1)))))  (get_local $1)))))))  (f32.ge  (get_local $0)  (get_local $1)))   (get_local $0))  (f64.abs  (i32.convert_s/f64   (i32.mul  (i64.ge_s  (local "g575" f32)  (i32.clz  (get_local $1)  (f64.convert_u/i32   (f64.sqrt  (get_local $1)  (i64.convert_s/f64   (i64.shl  (i64.ge_u  (local "g578" f64)  (if  (i64.lt_u  (f64.convert_u/i64   (f64.ne  (get_local $0)  (i64.convert_s/f64   (i64.and  (i64.lt_u  (f32.convert_u/i64   (f32.ceil  (get_local $0)  (if  (local "g580" f32)   (get_local $0)   (i32.convert_s/f32   (i32.add  (local "g592" i32)  (i32.rotl  (get_local $0)  (i64.gt_u  (get_local $0)  (i64.rem_u  (get_local $0)  (f64.convert_u/i64   (f64.min  (local "g593" i64)  (get_local $1)))))))))))  (get_local $0))  (get_local $1)))))  (i64.ne  (local "g594" f32)  (get_local $0)))   (f32.convert_s/i64   (f32.le  (i32.convert_s/f32   (i32.gt_u  (local "g595" f32)  (f64.convert_s/i32   (f64.sub  (local "g596" f64)  (f32.ge  (i32.convert_u/f32   (i32.rem_s  (local "g597" f32)  (if  (local "g598" i64)   (f32.convert_s/i32   (f32.floor  (get_local $0)  (i64.convert_s/f32   (i64.div_u  (i32.shr_u  (local "g599" i64)  (f64.convert_u/i32   (f64.le  (f64.sqrt  (f32.neg  (if  (local "g600" i64)   (f64.gt  (local "g601" i64)  (f64.ge  (get_local $1)  (if  (local "g602" i32)   (get_local $1)   (local "g603" i32))))   (i64.convert_s/f32   (i64.le_s  (local "g604" i32)  (local "g605" f32))))  (local "g606" i32))  (get_local $0))  (local "g607" i64))))  (get_local $1)))))   (i64.gt_s  (local "g610" f64)  (get_local $0)))))  (get_local $0))))))  (if  (get_local $1)   (get_local $1)   (if  (get_local $1)   (get_local $1)   (i32.convert_u/f32   (i32.and  (get_local $1)  (local "g612" f64)))))))   (get_local $1)))  (get_local $1)))))))  (f32.convert_u/i32   (f32.floor  (if  (get_local $1)   (get_local $0)   (f64.min  (local "g616" i32)  (f32.sub  (get_local $0)  (if  (get_local $1)   (local "g619" f32)   (local "g620" i64)))))  (local "g634" i32)))))  (get_local $0)))  (i64.convert_s/f32   (i64.sub  (get_local $0)  (f64.convert_s/i64   (f64.copysign  (get_local $0)  (if  (if  (f32.le  (f64.lt  (local "g657" f32)  (get_local $0))  (f32.sqrt  (get_local $1)  (get_local $0)))   (if  (f32.max  (f64.nearest  (get_local $1)  (if  (local "g658" f64)   (get_local $1)   (local "g2517" i64)))  (i64.convert_u/f32   (i64.xor  (get_local $1)  (if  (f64.convert_s/i64   (f64.nearest  (f32.nearest  (get_local $0)  (i64.convert_u/f32   (i64.mul  (if  (f32.convert_s/i64   (f32.min  (get_local $0)  (get_local $0)))   (get_local $1)   (local "g2521" f32))  (local "g2522" f32))))  (get_local $0)))   (i64.popcnt  (i64.shr_u  (i64.shr_u  (local "g2523" i32)  (local "g2533" f32))  (if  (get_local $1)   (get_local $0)   (i32.ne  (i64.clz  (get_local $1)  (f64.convert_u/i64   (f64.ceil  (f64.div  (get_local $0)  (i32.convert_u/f64   (i32.ne  (local "g2564" f64)  (get_local $0))))  (get_local $0))))  (get_local $0))))  (if  (if  (get_local $0)   (i64.mul  (local "g2566" f32)  (get_local $0))   (get_local $1))   (f64.convert_u/i64   (f64.copysign  (if  (i64.convert_s/f64   (i64.rem_u  (i32.ctz  (get_local $1)  (i64.clz  (i32.eq  (get_local $0)  (get_local $1))  (i64.rotr  (get_local $1)  (i64.eqz  (if  (if  (f64.convert_s/i64   (f64.sqrt  (get_local $1)  (get_local $1)))   (get_local $0)   (i32.and  (i32.popcnt  (local "g110044" f32)  (i32.shr_u  (i64.div_u  (get_local $0)  (local "g110045" f64))  (get_local $1)))  (local "g110046" f64)))   (f32.convert_u/i64   (f32.ne  (get_local $0)  (local "g110047" i64)))   (i64.eq  (get_local $1)  (get_local $0)))  (local "g110048" i64)))))  (local "g110049" i64)))   (get_local $1)   (get_local $0))  (local "g110050" i64)))   (local "g110051" i32)))   (i64.shr_u  (get_local $1)  (local "g110052" f32))))))   (local "g110053" f32)   (local "g110054" i32))   (local "g110055" i32))   (f64.ceil  (get_local $0)  (get_local $1))   (get_local $1))))))))  (get_local $1)))))))  (f64.convert_s/i64   (f64.lt  (f32.ne  (i32.convert_s/f32   (i32.gt_u  (get_local $1)  (i64.clz  (i32.div_u  (i64.rotr  (f32.convert_s/i64   (f32.sqrt  (if  (local "g110057" i64)   (get_local $0)   (local "g110058" f64))  (if  (get_local $1)   (get_local $1)   (i64.convert_s/f32   (i64.ge_s  (i64.ge_u  (get_local $0)  (if  (get_local $1)   (local "g110059" f32)   (local "g110060" i32)))  (local "g110061" f32))))))  (if  (get_local $0)   (if  (i32.rotr  (local "g110063" f32)  (if  (f32.convert_u/i32   (f32.min  (get_local $0)  (i32.convert_u/f32   (i32.add  (i64.rem_u  (local "g110065" f64)  (get_local $1))  (get_local $1)))))   (if  (get_local $1)   (i64.popcnt  (if  (i32.rem_s  (get_local $1)  (i32.shl  (get_local $0)  (get_local $1)))   (if  (i32.lt_u  (i32.clz  (local "g110081" f32)  (get_local $0))  (f64.convert_u/i32   (f64.le  (f32.max  (get_local $0)  (local "g110085" f64))  (i32.convert_u/f64   (i32.le_s  (i64.clz  (get_local $0)  (f64.convert_u/i64   (f64.ge  (local "g110095" i32)  (i32.convert_s/f64   (i32.shr_u  (get_local $0)  (get_local $0))))))  (get_local $1))))))   (get_local $0)   (i32.div_s  (get_local $0)  (f64.convert_s/i32   (f64.gt  (get_local $1)  (i64.convert_u/f64   (i64.shr_u  (get_local $0)  (i32.clz  (local "g110097" f64)  (get_local $0))))))))   (get_local $1))  (get_local $0))   (get_local $0))   (i64.add  (get_local $1)  (if  (get_local $0)   (get_local $0)   (get_local $1)))))   (f32.convert_s/i64   (f32.ge  (get_local $0)  (local "g110098" f64)))   (if  (f32.convert_s/i64   (f32.ge  (get_local $1)  (get_local $1)))   (f32.convert_u/i64   (f32.sqrt  (get_local $1)  (i32.convert_s/f32   (i32.lt_u  (get_local $1)  (f32.convert_s/i32   (f32.floor  (get_local $1)  (if  (local "g110248" f32)   (local "g110249" i32)   (get_local $1))))))))   (get_local $0)))   (get_local $1)))  (i32.clz  (i32.clz  (get_local $0)  (f64.convert_u/i32   (f64.max  (local "g110251" f64)  (i64.convert_s/f64   (i64.mul  (get_local $0)  (get_local $1))))))  (f32.convert_u/i32   (f32.neg  (get_local $0)  (i32.convert_u/f32   (i32.mul  (local "g110260" f64)  (local "g110261" i32)))))))  (get_local $0))))  (get_local $0))  (get_local $0)))))))  (f64.convert_s/i32   (f64.nearest  (get_local $0)  (get_local $1))))) (set_local $3  (get_local $1)) (if  (result i32)  (i32.lt_s  (get_local $0)  (get_local $1))  (then  (i32.add  (get_local $0)  (get_local $1)))  (else  (i32.add  (get_local $2)  (get_local $3))))) )