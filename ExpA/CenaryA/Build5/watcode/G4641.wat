(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (local $2 i32) (if  (get_local $1)   (if  (if  (get_local $0)   (i32.le_s  (f64.convert_s/i32   (f64.ceil  (local "g4643" i64)  (get_local $1)))  (if  (get_local $0)   (i32.lt_s  (if  (f64.convert_u/i32   (f64.le  (f64.lt  (i64.convert_u/f64   (i64.div_u  (i64.popcnt  (get_local $0)  (local "g4645" i32))  (if  (get_local $0)   (f64.convert_s/i64   (f64.floor  (f32.le  (get_local $1)  (local "g4648" i32))  (get_local $1)))   (if  (local "g4650" f32)   (get_local $1)   (get_local $1)))))  (f64.trunc  (get_local $0)  (get_local $1)))  (get_local $0)))   (f64.convert_u/i32   (f64.le  (local "g4654" f64)  (if  (f64.ne  (local "g4655" i64)  (local "g4656" i32))   (f32.max  (get_local $0)  (get_local $0))   (get_local $0))))   (f32.convert_u/i32   (f32.div  (local "g4658" i32)  (i64.convert_u/f32   (i64.and  (get_local $0)  (get_local $1))))))  (f32.convert_s/i32   (f32.abs  (get_local $0)  (get_local $1))))   (get_local $1)))   (get_local $1))   (get_local $1)   (i64.div_u  (i64.ctz  (get_local $1)  (get_local $0))  (get_local $0)))   (i32.xor  (f64.convert_u/i32   (f64.min  (f32.ceil  (f64.max  (f32.mul  (get_local $0)  (get_local $1))  (get_local $0))  (local "g4661" f32))  (get_local $1)))  (get_local $1))) (set_local $2  (get_local $0)) (get_local $1) (if  (result i32)  (i32.lt_s  (get_local $0)  (get_local $1))  (then  (i32.add  (get_local $0)  (get_local $1)))  (else  (i32.add  (get_local $2)  (get_local $3))))) )