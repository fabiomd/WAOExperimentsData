(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (i32.ne  (if  (get_local $0)   (get_local $1)   (f64.convert_s/i32   (f64.mul  (f64.abs  (f32.le  (if  (f32.div  (get_local $1)  (get_local $1))   (if  (f64.ceil  (get_local $1)  (if  (get_local $1)   (i32.convert_s/f64   (i32.rem_u  (local "g38404" f64)  (if  (get_local $1)   (i64.shr_u  (get_local $0)  (i64.sub  (f64.convert_u/i64   (f64.max  (local "g38407" f32)  (get_local $1)))  (i64.ge_s  (local "g38408" f64)  (f32.convert_s/i64   (f32.floor  (i64.convert_s/f32   (i64.clz  (get_local $1)  (f32.convert_u/i64   (f32.min  (get_local $1)  (get_local $1)))))  (if  (i32.convert_u/f32   (i32.sub  (get_local $0)  (get_local $0)))   (local "g38410" f64)   (if  (get_local $0)   (local "g38412" f64)   (i64.convert_s/f32   (i64.eqz  (get_local $1)  (get_local $0))))))))))   (get_local $1))))   (get_local $0)))   (local "g38420" f32)   (i32.convert_u/f32   (i32.ge_s  (get_local $0)  (get_local $1))))   (if  (get_local $1)   (i32.convert_s/f32   (i32.clz  (local "g38421" i64)  (f32.convert_u/i32   (f32.sub  (f64.le  (get_local $1)  (i32.convert_s/f64   (i32.rem_u  (f32.convert_u/i32   (f32.min  (local "g38425" i32)  (f64.neg  (get_local $1)  (get_local $0))))  (i64.or  (get_local $0)  (get_local $0)))))  (i64.convert_u/f32   (i64.and  (i32.lt_s  (f32.convert_s/i32   (f32.neg  (get_local $0)  (get_local $1)))  (get_local $0))  (f32.convert_u/i64   (f32.max  (get_local $1)  (get_local $1)))))))))   (i32.convert_s/f32   (i32.rem_u  (if  (get_local $0)   (get_local $1)   (f64.convert_u/i32   (f64.abs  (get_local $0)  (i32.convert_s/f64   (i32.div_u  (i64.eqz  (get_local $0)  (get_local $0))  (get_local $1))))))  (local "g38429" i64)))))  (local "g38430" f64))  (get_local $0))  (if  (local "g38432" f32)   (get_local $0)   (f32.min  (get_local $1)  (i64.convert_u/f32   (i64.eqz  (get_local $1)  (local "g38434" f64))))))))  (local "g38436" i64))) )