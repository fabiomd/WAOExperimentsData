(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (if  (get_local $1)   (f32.convert_u/i32   (f32.neg  (local "g322263" f64)  (f32.copysign  (i64.convert_s/f32   (i64.div_u  (get_local $0)  (i64.gt_s  (get_local $0)  (if  (f32.convert_s/i64   (f32.eq  (get_local $1)  (get_local $1)))   (if  (local "g322264" i64)   (f32.convert_s/i64   (f32.trunc  (i64.convert_u/f32   (i64.rotr  (f32.convert_s/i64   (f32.abs  (get_local $0)  (i64.convert_u/f32   (i64.rem_u  (local "g322265" i32)  (get_local $0)))))  (i64.and  (get_local $1)  (if  (local "g322266" f64)   (get_local $0)   (i64.lt_u  (i64.clz  (local "g322267" i64)  (get_local $0))  (get_local $0))))))  (local "g322270" i64)))   (f32.convert_u/i64   (f32.min  (get_local $1)  (local "g322281" f64))))   (local "g322282" i64)))))  (get_local $0))))   (if  (f64.convert_s/i32   (f64.sub  (get_local $1)  (f64.neg  (f64.floor  (f64.trunc  (get_local $0)  (local "g322283" i64))  (local "g322284" f64))  (i32.convert_u/f64   (i32.gt_u  (f64.convert_u/i32   (f64.copysign  (f64.add  (f64.add  (f32.trunc  (i64.convert_u/f32   (i64.rotl  (local "g322285" f32)  (i64.eqz  (get_local $0)  (local "g322326" i64))))  (get_local $0))  (f32.ceil  (local "g322327" i32)  (if  (get_local $1)   (f64.le  (f64.trunc  (i32.convert_s/f64   (i32.rem_s  (f32.convert_u/i32   (f32.mul  (f32.ne  (get_local $0)  (i64.convert_u/f32   (i64.ctz  (i64.and  (get_local $0)  (i64.ge_u  (get_local $1)  (get_local $1)))  (get_local $0))))  (i32.convert_s/f32   (i32.lt_s  (local "g322328" i32)  (get_local $0)))))  (get_local $1)))  (get_local $0))  (i64.convert_s/f64   (i64.rem_u  (if  (get_local $1)   (local "g322329" f64)   (get_local $0))  (f64.convert_u/i64   (f64.gt  (f32.div  (get_local $0)  (local "g322330" f64))  (f32.lt  (if  (local "g322331" i64)   (get_local $0)   (i64.convert_s/f32   (i64.shr_u  (local "g322337" f64)  (if  (local "g322400" f64)   (get_local $0)   (get_local $0)))))  (i32.convert_s/f32   (i32.popcnt  (local "g322401" i32)  (if  (f32.convert_u/i32   (f32.sqrt  (get_local $0)  (get_local $0)))   (i32.rem_s  (local "g322404" f32)  (get_local $0))   (local "g322405" i64))))))))))   (get_local $1))))  (i32.convert_s/f64   (i32.rotl  (get_local $0)  (local "g322406" i32))))  (get_local $0)))  (get_local $0))))))   (get_local $0)   (if  (get_local $1)   (i32.shl  (get_local $1)  (local "g322407" f32))   (local "g322467" i64))))) )