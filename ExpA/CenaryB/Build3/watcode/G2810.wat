(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (set_local $2  (get_local $0)) (f32.convert_s/i32   (f32.eq  (f64.floor  (f32.sqrt  (if  (get_local $0)   (local "g2813" f32)   (get_local $1))  (get_local $1))  (f32.mul  (f64.gt  (i32.convert_s/f64   (i32.clz  (if  (get_local $0)   (f32.convert_s/i32   (f32.neg  (i32.convert_u/f32   (i32.eq  (i64.gt_u  (get_local $0)  (get_local $0))  (f64.convert_u/i32   (f64.copysign  (i64.convert_u/f64   (i64.clz  (f64.convert_s/i64   (f64.neg  (get_local $0)  (i64.convert_s/f64   (i64.div_s  (i64.rotl  (f64.convert_s/i64   (f64.floor  (if  (if  (local "g2814" i64)   (i64.convert_u/f64   (i64.gt_s  (i32.lt_u  (f64.convert_s/i32   (f64.sqrt  (get_local $1)  (get_local $0)))  (get_local $1))  (local "g2815" i64)))   (get_local $1))   (get_local $0)   (get_local $0))  (if  (local "g2816" f32)   (get_local $1)   (i64.convert_u/f64   (i64.ge_s  (get_local $0)  (f64.convert_u/i64   (f64.add  (get_local $0)  (f32.eq  (i32.convert_u/f32   (i32.clz  (local "g2832" f64)  (i32.shr_s  (local "g2833" f32)  (get_local $1))))  (local "g2834" f32)))))))))  (f32.convert_u/i64   (f32.abs  (get_local $1)  (get_local $1))))  (get_local $0)))))  (get_local $1)))  (get_local $0)))))  (get_local $1)))   (get_local $1))  (f64.convert_u/i32   (f64.div  (get_local $1)  (local "g2843" f64)))))  (get_local $0))  (local "g2844" f64)))  (get_local $1))) (if  (result i32)  (i32.lt_s  (get_local $0)  (get_local $1))  (then  (i32.add  (get_local $0)  (get_local $1)))  (else  (i32.add  (get_local $2)  (get_local $3))))) )