(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (f64.neg  (i32.convert_u/f64   (i32.le_u  (f32.convert_s/i32   (f32.max  (get_local $0)  (f64.le  (i32.convert_u/f64   (i32.rotr  (if  (f64.convert_u/i32   (f64.floor  (i32.convert_u/f64   (i32.shr_u  (local "g10564" f64)  (f32.convert_s/i32   (f32.mul  (f32.mul  (i64.convert_s/f32   (i64.gt_s  (get_local $1)  (local "g10569" i64)))  (i64.convert_u/f32   (i64.or  (local "g10570" i32)  (get_local $1))))  (get_local $1)))))  (if  (local "g10571" f32)   (get_local $1)   (local "g10572" f32))))   (i64.shr_u  (get_local $0)  (f64.convert_s/i64   (f64.sub  (i32.convert_u/f64   (i32.le_u  (local "g10573" f64)  (i64.rem_u  (get_local $1)  (get_local $0))))  (i32.convert_u/f64   (i32.eq  (f32.convert_s/i32   (f32.ge  (if  (get_local $0)   (local "g10574" f32)   (i32.convert_s/f32   (i32.rem_u  (get_local $1)  (get_local $0))))  (get_local $0)))  (get_local $0))))))   (get_local $1))  (get_local $0)))  (local "g10575" i64))))  (f64.convert_s/i32   (f64.abs  (i32.convert_u/f64   (i32.clz  (f64.convert_u/i32   (f64.trunc  (get_local $1)  (get_local $0)))  (get_local $1)))  (get_local $0)))))  (f32.nearest  (f32.sub  (get_local $0)  (local "g10577" i32))  (i64.convert_s/f32   (i64.shr_u  (get_local $1)  (local "g10578" i64))))) (i32.lt_s  (get_local $0)  (get_local $1))) )