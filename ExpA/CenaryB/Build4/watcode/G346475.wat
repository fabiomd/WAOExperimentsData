(module (table 0 anyfunc) (memory $0 1) (export "memory" (memory $0)) (export "sumtwo" (func $sumtwo)) (func $sumtwo (param $0 i32) (param $1 i32) (result i32)  (i32.rotr  (i32.ge_s  (f32.convert_u/i32   (f32.sub  (get_local $0)  (get_local $1)))  (i64.ctz  (local "g346476" i64)  (get_local $0)))  (f32.convert_s/i32   (f32.abs  (f64.eq  (i64.convert_s/f64   (i64.clz  (f64.convert_s/i64   (f64.add  (get_local $1)  (if  (get_local $1)   (i64.convert_s/f64   (i64.rotl  (i64.lt_u  (if  (get_local $1)   (i64.eqz  (if  (local "g346483" f64)   (local "g346484" i32)   (local "g346486" f64))  (if  (f32.convert_u/i64   (f32.sqrt  (get_local $0)  (if  (local "g346487" f32)   (get_local $1)   (get_local $1))))   (local "g346488" f32)   (local "g346489" f64)))   (get_local $0))  (get_local $0))  (i64.eq  (get_local $1)  (if  (if  (get_local $1)   (get_local $0)   (if  (i32.gt_u  (i64.le_u  (f64.convert_s/i64   (f64.add  (get_local $1)  (f32.ceil  (if  (get_local $0)   (local "g346491" f64)   (i64.convert_u/f32   (i64.shr_u  (local "g346492" i64)  (local "g346493" f32))))  (get_local $0))))  (f32.convert_s/i64   (f32.floor  (get_local $1)  (i64.convert_u/f32   (i64.div_u  (get_local $1)  (get_local $0))))))  (f32.convert_u/i32   (f32.trunc  (f64.min  (i64.convert_s/f64   (i64.lt_u  (get_local $1)  (get_local $0)))  (get_local $0))  (get_local $1))))   (get_local $0)   (get_local $1)))   (get_local $0)   (f64.convert_s/i64   (f64.le  (f64.div  (get_local $1)  (get_local $0))  (i32.convert_s/f64   (i32.eq  (i64.or  (if  (f64.convert_s/i64   (f64.mul  (get_local $0)  (get_local $1)))   (get_local $0)   (get_local $1))  (get_local $1))  (get_local $1)))))))))   (local "g346497" i64))))  (local "g346498" i32)))  (i64.convert_s/f64   (i64.shl  (get_local $1)  (get_local $0))))  (local "g346499" f64))))) )